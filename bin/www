#!/usr/bin/env node

'use strict';

var debug = require('debug')('PskReplicant:server');
var https = require('https');
var http = require('http');
var fs = require('fs');


//this is our sample UI site on port https://localhost:3000
// the 2 express apps:
var webApp = require('../app/app');
var webAppPort = normalizePort(process.env.PORT || '3000');

var serverCommonOptions = {
    key: loadPEM('key'),
    cert: loadPEM('key-cert')
};

webApp.set('port', webAppPort);
var webServer = https.createServer(serverCommonOptions, webApp);
webServer.listen(webAppPort, function () {
    debug('webServer is listening on port %s', webAppPort);
});
webServer.on('error', onError);


// Here we will setup the Fauxton UI site - under
// http://localhost:3002

var pouchWeb = require('../app/client');
var pouchWebPort = normalizePort(process.env.PORT || '3002');

var pouchServerApp = require('../app/client');
var pouchAppPort = normalizePort("3001");

pouchWeb.set('port', pouchWebPort);
var pouchWebServer = http.createServer(pouchWeb);
pouchWeb.listen(pouchWebPort, function(){
    debug('Pouch UI web listening on port %s', pouchWebPort);
})
pouchWeb.on('error', onError);


// here is the Fauxton Site - using the generic site as an API endpoing
// which is then hosted using HTTPS/TLS with PSK

//PSK stuff
//for this example - only TestUser will be able to validate
// AND only using THIS "key" 
var identity = 'TestUser';  
var pskey = new Buffer('d731ef57be09e5204f0b205b60627028');


// This is where, server side, to provide based upon a User identity -
// which is part of the TLS-PSK HELLO sequenct, you provide the "key"
function serverCallback(id) {
    debug('in server callback');
    debug('identity %', id);
    debug('key %s', pskey);
    if (id == identity) {
        return pskey;
    }
    return null;
}

var serverOptions = {
    ciphers : 'PSK-AES256-CBC-SHA:PSK-3DES-EDE-CBC-SHA:PSK-AES128-CBC-SHA',
    pskCallback : serverCallback,
    key: loadPEM('key'),
    cert: loadPEM('key-cert')
}

pouchServerApp.set('port', pouchAppPort);

var pouchServer = https.createServer(serverOptions, pouchServerApp);

pouchServer.listen(pouchAppPort, function () {
    debug('pouchServer is listening on port %s', pouchAppPort);
});

pouchServer.on('error', onError);



// various utility functions...

// cert/pem loaders
function filenamePEM(n) {
    return require('path').join('./', n + '.pem');
}

function loadPEM(n) {
    return fs.readFileSync(filenamePEM(n));
}


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error, parent) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


